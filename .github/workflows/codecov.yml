# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    This Orb posts your test suite's coverage data to coveralls.io for analysis, change tracking, and notifications.
    When running on Pull Request builds, a comment will be added to the PR with details about how coverage will be affected if merged.
display:
    home_url: https://coveralls.io/
    source_url: https://github.com/coverallsapp/orb
commands:
    upload:
        parameters:
            base_path:
                default: ""
                description: |
                    Path to the root folder of the project the coverage was collected in.
                type: string
            carryforward:
                default: ""
                description: |
                    References for jobs to carry-forward from previous builds (if missing).
                type: string
            compare_ref:
                default: ""
                description: |
                    Branch name to compare coverage with. Specify if you want to always check coverage change for PRs against one branch.
                type: string
            compare_sha:
                default: ""
                description: Commit SHA to compare coverage with.
                type: string
            coverage_file:
                default: ""
                description: |
                    Local path to the coverage output file produced by your test suite. An error will be thrown if the file can't be found. This is the file that will be sent to the Coveralls API.
                type: string
            coverage_format:
                default: ""
                description: |
                    Force coverage report format. If not specified coveralls will try to determine the format automatically based on file extension and/or content. Supported formats are - lcov, simplecov, cobertura, jacoco, gcov, golang, python.
                type: string
            coveralls_endpoint:
                default: https://coveralls.io
                description: |
                    Hostname and protocol (https://<host>). Specifies a Coveralls Enterprise hostname. You can also define this in your Circle's Environment Variables as COVERALLS_ENDPOINT
                type: string
            dry_run:
                default: false
                description: Do not send anything but do the parsing
                type: boolean
            flag_name:
                default: ""
                description: |
                    Options flag name of the job, e.g. "Unit Tests", "Integration Tests", etc.
                type: string
            parallel:
                default: false
                description: |
                    Set to true for parallel jobs, where multiple posts to Coveralls will be performed before completing the build with `parallel_finished`.
                type: boolean
            parallel_finished:
                default: false
                description: |
                    Set to true in the final job, after the other parallel jobs steps have completed. This will send a webhook to Coveralls to set the build complete.
                type: boolean
            token:
                default: COVERALLS_REPO_TOKEN
                description: |
                    Your Coveralls Repo token defined in your Circle's Environment Variables.
                type: env_var_name
            verbose:
                default: false
                description: Set to true for verbose output from the Coveralls API push.
                type: boolean
        steps:
            - run:
                command: |
                    #!/bin/bash

                    curl -sL https://github.com/coverallsapp/coverage-reporter/releases/latest/download/coveralls-linux.tar.gz | tar xz

                    echo "Parsing args"
                    if [ "${COVERALLS_VERBOSE}" == "1" ]; then
                      args="${args} --debug"
                    fi

                    echo Dry run - "${COVERALLS_DRY_RUN}"
                    if [ "${COVERALLS_DRY_RUN}" == "1" ]; then
                      args="${args} --dry-run"
                    fi

                    if [ -z "${COVERALLS_REPO_TOKEN}" ]; then
                      # shellcheck disable=SC2155
                      export COVERALLS_REPO_TOKEN=$(printenv "${COVERALLS_REPO_TOKEN_ENV}")
                    fi

                    if [ "${COVERALLS_DONE}" == "1" ]; then
                      echo "Reporting parallel done"

                      set -x

                      # shellcheck disable=SC2086
                      ./coveralls --done ${args}

                      exit 0
                    fi

                    # Check for coverage file presence
                    if [ -n "${COVERALLS_COVERAGE_FILE}" ]; then
                      if [ -r "${COVERALLS_COVERAGE_FILE}" ]; then
                        args="${args} --file ${COVERALLS_COVERAGE_FILE}"
                      else
                        echo "Please specify a valid 'coverage_file' parameter. File doesn't exist or is not readable."
                        exit 1
                      fi
                    fi

                    if [ -n "${COVERALLS_BASE_PATH}" ]; then
                      args="${args} --base-path ${COVERALLS_BASE_PATH}"
                    fi

                    if [ -n "${COVERALLS_COVERAGE_FORMAT}" ]; then
                      args="${args} --format ${COVERALLS_COVERAGE_FORMAT}"
                    fi

                    echo "Reporting coverage"

                    set -x
                    # shellcheck disable=SC2086
                    ./coveralls $args
                environment:
                    COVERALLS_BASE_PATH: << parameters.base_path >>
                    COVERALLS_CARRYFORWARD_FLAGS: << parameters.carryforward >>
                    COVERALLS_COMPARE_REF: << parameters.compare_ref >>
                    COVERALLS_COMPARE_SHA: << parameters.compare_sha >>
                    COVERALLS_COVERAGE_FILE: << parameters.coverage_file >>
                    COVERALLS_COVERAGE_FORMAT: << parameters.coverage_format >>
                    COVERALLS_DONE: << parameters.parallel_finished >>
                    COVERALLS_DRY_RUN: << parameters.dry_run >>
                    COVERALLS_ENDPOINT: << parameters.coveralls_endpoint >>
                    COVERALLS_FLAG_NAME: << parameters.flag_name >>
                    COVERALLS_PARALLEL: << parameters.parallel >>
                    COVERALLS_REPO_TOKEN_ENV: << parameters.token >>
                    COVERALLS_VERBOSE: << parameters.verbose >>
                name: Upload Coverage Result To Coveralls
examples:
    parallel:
        description: |
            Coveralls parallel build. 'build' jobs uploads coverage, then 'done' job hits parallel complete webhook to finish the build. Demo: https://github.com/coverallsapp/actions-demo
        usage:
            version: "2.1"
            orbs:
                coveralls: coveralls/coveralls@x.y.z
                jobs:
                    build-1:
                        build-2:
                            docker:
                                - image: circleci/node:10.0.0
                            steps:
                                - checkout
                                - run:
                                    command: npm install && make test-coverage-2
                                    name: Install and Make 2
                                - coveralls/upload:
                                    flag_name: job2
                                    parallel: true
                        docker:
                            - image: circleci/node:10.0.0
                              steps:
                                - checkout
                            - run:
                                command: npm install && make test-coverage-1
                                name: Install and Make 1
                            - coveralls/upload:
                                flag_name: job1
                                parallel: true
                        done:
                            docker:
                                - image: circleci/node:10.0.0
                            steps:
                                - coveralls/upload:
                                    carryforward: job1,job2
                                    parallel_finished: true
                    workflows:
                        test_parallel_then_upload:
                            jobs:
                                - build-1
                                - build-2
                                - done:
                                    requires:
                                        - build-1
                                        - build-2
            workflows: null
    simple:
        description: |
            Build and upload to Coveralls in single job. Demo: https://github.com/coverallsapp/actions-demo
        usage:
            version: "2.1"
            orbs:
                coveralls: coveralls/coveralls@1.0.6
                jobs:
                    build:
                        docker:
                            - image: circleci/node:10.0.0
                              steps:
                                - checkout
                            - run:
                                command: npm install && make test-coverage
                                name: Install and Make
                            - coveralls/upload
            workflows: null

